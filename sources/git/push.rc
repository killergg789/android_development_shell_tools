#!/bin/bash
#
# Copyright 2015-2018 Adrian DC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# === Standalone Source Helper ===
# source <(curl -Ls https://github.com/AdrianDC/android_development_shell_tools/raw/master/sources/git/remotes.rc)
# source <(curl -Ls https://github.com/AdrianDC/android_development_shell_tools/raw/master/sources/git/stats.rc)
# source <(curl -Ls https://github.com/AdrianDC/android_development_shell_tools/raw/master/sources/git/tools.rc)
# source <(curl -Ls https://github.com/AdrianDC/android_development_shell_tools/raw/master/sources/git/push.rc)

# === Git Push Helpers ===
alias gitpf='git push -f';

# === Git Push Validated Remote ===
function gitpu()
{
  # Usage: gitpu [remote] [branch] [input] (Git push to validated remote)

  # Variables
  local getbranch;
  local remote;
  local branch;
  local input;
  local cmd;

  # Initialize variables
  getbranch=$(repogetbranch);
  remote=${1:-$(gitgetremote "${getbranch}")};
  branch=${2:-${getbranch}};
  input=${3};

  # Header information
  echo '';
  echo -e " \e[1;32m=== gitpu - Pushing to branch '${branch}' ===\e[0m";
  echo '';

  # Get remote stats
  gitstat "${remote}" "${branch}" true;

  # Push command
  cmd="git push -f ${remote} HEAD:refs/heads/${branch}";

  # Push validation
  echo '';
  echo -e " \e[1;33mgitpu:\e[0m ${cmd}";
  echo '';
  echo -en " \e[1;37m> Proceed with git push (Y/n) ? \e[0m";
  if [ -z "${input}" ]; then
    read -r key;
  else
    key=${input};
    echo "${key}";
  fi;
  echo '';

  # Abort push
  if [[ "${key}" == 'n' ]] || [[ "${key}" == 'N' ]]; then
    return;
  fi;

  # Fetch and push
  git fetch "${remote}" "${branch}";
  ${cmd};
  echo '';
}

# === Git Full Url Push ===
function gitpurl()
{
  # Usage
  if [ -z "${1}" ]; then
    echo '';
    echo ' Usage: gitpurl <url> (Git pull to full url)';
    echo '';
    return;
  fi;

  # Variables
  local url=${1};
  local branch;

  # Prepare url
  branch=${url};
  url=${url%/commits/*};
  url=${url%/tree/*};
  branch=${branch#*/commits/};
  branch=${branch#*/tree/};

  # Git push to full url
  gitpu "${url}" "${branch}";
}

# === Git Push Validated Username Helpers ===
alias gitpa='gitremoteverify $(githubusername) gitraa && gitpu $(githubusername)';
alias gitpama='gitremoteverify $(githubusername) gitraa && gitpu $(githubusername) master';
alias gitpa14='gitremoteverify $(githubusername) gitraa && gitpu $(githubusername) cm-14.1';
alias gitpa15='gitremoteverify $(githubusername) gitraa && gitpu $(githubusername) lineage-15.1';
alias gitpal='gitremoteverify $(githubusername) gitraa && gitpu $(githubusername) local_manifests'
alias gitpaman='gitremoteverify $(githubusername) gitraa && gitpu $(githubusername) manifests'

# === Git Push Validated Origin Helpers ===
alias gitpo='gitremoteverify origin false && gitpu origin';
alias gitpom='gitremoteverify origin false && gitpu origin master';

# === Git Push Validated Project Helpers ===
alias gitpp='gitremoteverify project gitrap && gitpu project';
alias gitppm='gitremoteverify project gitrap && gitpu project master';

# === Git Push Validated Private Helpers ===
alias gitppriv='gitremoteverify private false && gitpu private';
alias gitpprivm='gitremoteverify private false && gitpu private master';
